<?xml version="1.0" encoding="utf-8"?>
<plasterManifest version='0.1.0'>
    <metadata>
        <id>Unique-Template-Pkg-Name</id>
        <!-- For display by UI's in a menu list -->
        <title>New Module</title>
        <!-- For display by UI's in hover help -->
        <description>Plaster template for creating the files for a PowerShell module.</description>
        <version>0.1.0</version>
        <tags>Module, ModuleManifest, Build</tags>
    </metadata>
    <parameters>
        <parameter name='ModuleName' type='input' required='true' prompt='Enter the name of the module'/>
        <parameter name='Version' type='input' default='1.0.0' store='true' prompt='Enter the version number for the module'/>
        <parameter name='FullName' type='input' required='true' prompt='Enter your fullname'/>
        <parameter name='Options' type='multichoice' default='0,1,2' prompt='Select desired options'>
            <choice label='&amp;Pester test support'
                    help="Adds Tests directory and a starter Pester Tests file."
                    value="Pester"/>
            <choice label='P&amp;Sake build script'
                    help="Adds a PSake build script that generates the module directory for publishing to the PSGallery."
                    value="PSake"/>
            <choice label='&amp;Git'
                    help="Adds a .gitignore file."
                    value="Git"/>
            <choice label='&amp;None'
                    help="No options specified."
                    value="None"/>
        </parameter>
        <parameter name='Editor' type='choice' default='2' prompt='Which editor do you use'>
            <choice label='&amp;ISE'
                    help="Your editor is PowerShell ISE."
                    value="ISE"/>
            <choice label='Visual Studio &amp;Code'
                    help="Your editor is Visual Studio Code."
                    value="VSCode"/>
            <choice label='&amp;None'
                    help="No editor specified."
                    value="None"/>
        </parameter>
        <parameter name='License' type='choice' default='2' prompt='Select a license for your module'>
            <choice label='&amp;Apache'
                    help="Adds an Apache license file."
                    value="Apache"/>
            <choice label='&amp;MIT'
                    help="Adds an MIT license file."
                    value="MIT"/>
            <choice label='&amp;None'
                    help="No license specified."
                    value="None"/>
        </parameter>
        <parameter name='execute' type='multichoice' default='' prompt='executes powershell code'>
            <choice label='&amp;script'
                    help="Executes a script"
                    value="gitinit.script"/>
            <choice label='&amp;PsakeTask'
                    help="Executes a PsakeTask"
                    value="gitinit.psakeTask"/>
            <choice label='&amp;function'
                    help="Executes a function within a script"
                    value="gitinit.function"/>
        </parameter>
    </parameters>
    <dependencies>
        <dependency id="another-template-id??"/>
    </dependencies>
    <content>
        <newModuleManifest destination='${PLASTER_PARAM_ModuleName}.psd1'
                           moduleVersion='$PLASTER_PARAM_Version'
                           rootModule='${PLASTER_PARAM_ModuleName}.psm1'
                           author='$PLASTER_PARAM_FullName'/>
        <file source='Module.psm1'
              destination='${PLASTER_PARAM_ModuleName}.psm1'/>
        <file source='_gitignore'
              destination='.gitignore'
              condition='$PLASTER_PARAM_Options -contains "Git"'/>
        <file source='ApacheLicense.txt'
              destination='LICENSE.txt'
              template='true'
              condition="$PLASTER_PARAM_License -eq 'Apache'"/>
        <file source='MITLicense.txt'
              destination='LICENSE.txt'
              template='true'
              condition="$PLASTER_PARAM_License -eq 'MIT'"/>
        <file source='Build.ps1'
              destination='Build.ps1'
              condition='$PLASTER_PARAM_Options -contains "PSake"'/>
        <file source='en-US\about_Module.help.txt'
              destination='en-US\about_${PLASTER_PARAM_ModuleName}.help.txt'
              template='true'/>
        <file source='Tests\Module.T.ps1'
              destination='Tests\${PLASTER_PARAM_ModuleName}.Tests.ps1'
              template='true'
              condition="$PLASTER_PARAM_Options -contains 'Pester'"/>
        <file source='tasks.json'
              destination='.vscode\tasks.json'
              condition="$PLASTER_PARAM_Editor -eq 'VSCode'"/>
        <modify path='.vscode\tasks.json'
                encoding='utf8'
                condition="$PLASTER_PARAM_Editor -eq 'VSCode' -and $PLASTER_PARAM_Options -contains 'Pester' -and $PLASTER_FileContent -notmatch 'taskName&quot;:\s*&quot;Test&quot;'">
            <replacement pattern='(?si)(?&lt;="tasks":\s*\[)(\s*)(?=\{)'>
            <![CDATA[$1{
            "taskName": "Test",
            "suppressTaskName": true,
            "isTestCommand": true,
            "showOutput": "always",
            "args": [
                "Write-Host 'Invoking Pester...'; Invoke-Pester -PesterOption @{IncludeVSCodeMarker=$true};",
                "Invoke-Command { Write-Host 'Completed Test task in task runner.' }"
            ],
            "problemMatcher": [
                {
                    "owner": "powershell",
                    "fileLocation": ["absolute"],
                    "severity": "error",
                    "pattern": [
                        {
                            "regexp": "^\\s*(\\[-\\]\\s*.*?)(\\d+)ms\\s*$",
                            "message": 1
                        },
                        {
                            "regexp": "^\\s+at\\s+[^,]+,\\s*(.*?):\\s+line\\s+(\\d+)$",
                            "file": 1,
                            "line": 2
                        }
                    ]
                }
            ]
        },$1]]>
            </replacement>
        </modify>
        <execute source='scripts\gitinit.psakeTask.ps1'
                 type='psakeTask'
                 Task='gitinit'
                 condition='$PLASTER_PARAM_execute -contains "gitinit.psakeTask"'>
                 <parameters>
                     <parameter name='ModuleName' value='${PLASTER_PARAM_ModuleName}'/>
                     <parameter name='Version' value='${PLASTER_PARAM_Version}'/>
                 </parameters>
        </execute>
        <execute source='scripts\gitinit.script.ps1'
                 type='script'
                 condition='$PLASTER_PARAM_execute -contains "gitinit.script"'>
                 <parameters>
                     <parameter name='ModuleName' value='${PLASTER_PARAM_ModuleName}'/>
                     <parameter name='Version' value='${PLASTER_PARAM_Version}'/>
                 </parameters>
        </execute>
        <execute source='scripts\gitinit.scriptfunction.ps1'
                 type='scriptfunction'
                 function='Initialize-gitrepo'
                 condition='$PLASTER_PARAM_execute -contains "gitinit.function"'>
                 <parameters>
                     <parameter name='ModuleName' value='${PLASTER_PARAM_ModuleName}'/>
                     <parameter name='Version' value='${PLASTER_PARAM_Version}'/>
                 </parameters>
        </execute>
    </content>
</plasterManifest>